#!/usr/bin/env bash

set -eu

declare ESC
ESC=$(printf '\033')

readonly RED="${ESC}[31m"
readonly GREEN="${ESC}[32m"
readonly CYAN="${ESC}[36m"
readonly NO_COLOR="${ESC}[m"

readonly SUCCESS="✓"
readonly FAILURE="X"

usage() {
  cat <<EOF
A GitHub CLI extension to sync all local branches of the current repository
with the remote default branch, then prune all merged, including squashed,
branches.

Options:
    --help|-h        show help

EOF
}

info() {
  # shellcheck disable=SC2183
  printf "\r%s %s%-80s\n" "$(green "${SUCCESS}")" "${*}"
}

error() {
  # shellcheck disable=SC2183
  printf "\r%s %s%-80s\n" "$(red "${FAILURE}")" "${*}"
}

red() {
  echo -n "${RED}${1}${NO_COLOR}"
}

green() {
  echo -n "${GREEN}${1}${NO_COLOR}"
}

cyan() {
  echo -n "${CYAN}${1}${NO_COLOR}"
}

spin() {
  local -r pid="${1}"
  local -r msg="${2}"

  sp="⣾⣽⣻⢿⡿⣟⣯⣷"
  i=1
  while kill -0 "${pid}" >/dev/null 2>&1; do
    s="${sp:i++%${#sp}:1}"
    printf "\r%s %s" "$(cyan "${s}")" "${msg}"
    sleep 0.1
  done
}

get_default_branch() {
  gh api 'repos/{owner}/{repo}' --jq '.default_branch'
}

delete_merged() {
  local -r default_branch="${1}"

  git switch -q "${default_branch}"

  local -r branches=$(git branch --merge | grep -v "${default_branch}")

  for branch in $branches; do
    git branch -q -d "$branch"
    info "Deleted \"${branch}\" branch"
  done

  git switch -q "${default_branch}"
}

delete_squashed() {
  local -r default_branch="${1}"

  git switch -q "${default_branch}"

  local -r branches=$(git for-each-ref refs/heads/ "--format=%(refname:short)" | tr '\n' ' ')

  local merge_base
  for branch in $branches; do
    merge_base=$(git merge-base "${default_branch}" "${branch}")

    if [[ $(git cherry "${default_branch}" "$(git commit-tree "$(git rev-parse "${branch}"^'{tree}')" -p "${merge_base}" -m _)") == "-"* ]]; then
      git branch -q -D "${branch}"
      info "Deleted \"${branch}\" branch"
    fi
  done

  git switch -q "${default_branch}"
}

pull() {
  local -r branch="${1}"
  local -r default_branch="${2}"

  git switch -q "${branch}"

  if git pull origin "${default_branch}" --rebase >/dev/null 2>&1; then
    git switch -q "${default_branch}"
    info "Synced \"${branch}\" branch"
  else
    git rebase --abort >/dev/null 2>&1
    git switch -q "${default_branch}"
    error "Failed to sync \"${branch}\" branch"
  fi
}

sync() {
  local -r default_branch="${1}"

  git switch -q "${default_branch}"

  # Sync the default branch first.
  pull "${default_branch}" "${default_branch}" &
  spin "$!" "Syncing \"${default_branch}\" branch..."

  delete_merged "${default_branch}"
  delete_squashed "${default_branch}"

  for b in $(git branch | grep -v "${default_branch}"); do
    pull "${b}" "${default_branch}" &
    spin "$!" "Syncing \"${b}\" branch..."
  done
}

main() {
  if [[ "$#" -gt 0 ]]; then
    case "${1}" in
      '--help' | '-h')
        usage
        return 0
        ;;
    esac
  fi

  sync "$(get_default_branch)"
}

main "$@"
